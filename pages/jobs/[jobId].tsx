import 'react-quill/dist/quill.snow.css';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useRouter } from 'next/router';
import Layout from '../../Components/Layout';
import { getEmailByJobId, getJobByJobId } from '../../util/database';

const ReactQuill = dynamic(() => import('react-quill'), { ssr: false });

export default function SingleJob(props: any) {
  const router = useRouter();
  async function deleteJobByJobI(id: any) {
    await fetch(`/api/jobs/${props.job.id}`, {
      method: 'DELETE',
    });
    router.push(`/jobs`);
  }
  return (
    <>
      <Head>
        <title>{props.job.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout username={props.username} />
      <div className="job-page">
        <h2 style={{ textAlign: 'center' }}>{props.job.title}</h2>
        <p>{}</p>
        <div
          dangerouslySetInnerHTML={{ __html: props.job.details }}
          className="container-sm"
        ></div>
        <div style={{ display: 'flex', color: 'white !important' }}>
          {props.username ? (
            <button
              onClick={() => deleteJobByJobI(props.job.id)}
              className="delete-job"
            >
              Delete Job
            </button>
          ) : (
            <a
              href={`mailto:${props.email.email}`}
              className="see-job"
              style={{ margin: 'auto' }}
            >
              Apply
            </a>
          )}
        </div>
      </div>
    </>
  );
}

export async function getServerSideProps(context: any) {
  if (
    context.req.headers.host &&
    context.req.headers['x-forwarded-proto'] &&
    context.req.headers['x-forwarded-proto'] !== 'https'
  ) {
    return {
      redirect: {
        destination: `https://${context.req.headers.host}/jobs/${context.query.jobId}`,
        permanent: true,
      },
    };
  }

  let jobid = context.query.jobId;

  const job = await getJobByJobId(jobid);
  const email = await getEmailByJobId(jobid);
  return {
    props: {
      job: job || null,
      email: email || null,
    },
  };
}
