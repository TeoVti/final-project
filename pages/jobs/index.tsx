import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import React, { useState } from 'react';
import {
  Button,
  Form,
  Input,
  Modal,
  ModalBody,
  ModalFooter,
  ModalHeader,
} from 'reactstrap';
import Layout from '../../Components/Layout';
import {
  getExperience,
  getJobsByExperienceTitle,
  getJobsByRegionTitle,
  getRegions,
} from '../../util/database';

type Props = {
  username?: string;
  experience: Exp[];
  regions: Region[];
  allJobs: any;
  allJobsByValidSessionUser: any;
};

type Exp = {
  id: number;
  title: string;
};

type Region = {
  id: number;
  title: string;
};

export default function Jobs(props: Props) {
  const [title, setTitle] = useState('');
  const [regionId, setRegionId] = useState('');
  const [details, setDetails] = useState('');
  const [pay, setPay] = useState('');
  const [expId, setExpId] = useState('');
  const [errors, setErrors] = useState<any[]>();
  const router = useRouter();
  const [allJobs, setAllJobs] = useState(props.allJobs);

  // Handle click on "Select By Category" Button
  const handleJobByRegionClick = (title: string) => {
    // Filter jobs by category on the frontend
    function getJobsByRegionTitle(job: any) {
      // returns a boolean
      const jobRegionTitle = job.regionsTitle;
      // console.log(jobRegionTitle);
      return jobRegionTitle === title;
    }
    const jobsByRegionTitle = props.allJobs.filter(getJobsByRegionTitle);
    // event.preventDefault();
    return setAllJobs(jobsByRegionTitle);
  };

  const handleJobByExperienceClick = (title: string) => {
    // Filter jobs by category on the frontend
    function getJobsByExperienceTitle(job: any) {
      // returns a boolean
      const jobExpTitle = job.experienceTitle;
      // console.log(jobRegionTitle);
      return jobExpTitle === title;
    }
    const jobsByExpTitle = props.allJobs.filter(getJobsByExperienceTitle);
    // event.preventDefault();
    return setAllJobs(jobsByExpTitle);
  };

  // console.log(handleJobByExperienceClick('1-3 Years'));

  const [modal, setModal] = useState(false);
  const toggle = () => setModal(!modal);

  async function clickHandler() {
    const response = await fetch(`/api/jobs/create`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      // send the request body to the API route
      body: JSON.stringify({
        title: title,
        regionId: Number(regionId),
        expId: Number(expId),
        pay: pay,
        details: details,
      }),
    });

    const {
      user,
      sluggedTitle,
      errors: [errorMessage],
    } = await response.json();

    // Check if there is an errorMessage inside the json and update state
    if (errorMessage) {
      // console.log('error in create.tsx', errorMessage);
      setErrors(errorMessage);
      return;
    }
    router.push(`/jobs`);
  }

  return (
    <div>
      <Head>
        <title>{props.username}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout username={props.username} />
      <div className="jobs-page">
        <h1>Job Board</h1>
        <div>
          {' '}
          {props.username ? (
            <div className="my-jobs-section">
              <h2>My Posts</h2>
              <Button color="success" onClick={toggle}>
                Add a Shift
              </Button>
              <Modal isOpen={modal} toggle={toggle} fade={false}>
                <ModalHeader toggle={toggle}>Modal title</ModalHeader>
                <ModalBody>
                  <Form>
                    <Input
                      value={title}
                      required
                      placeholder="Job Title"
                      bsSize="lg"
                      onChange={(event) => {
                        setTitle(event.currentTarget.value);
                      }}
                    />
                    <Input
                      type="select"
                      value={regionId}
                      onChange={(event) => {
                        setRegionId(event.currentTarget.value);
                      }}
                    >
                      <option value="">Select Region</option>
                      {props.regions.map((region) => {
                        return (
                          <option key={region.id} value={region.id}>
                            {region.title}
                          </option>
                        );
                      })}
                    </Input>
                    <Input
                      type="select"
                      value={expId}
                      onChange={(event) => {
                        setExpId(event.currentTarget.value);
                      }}
                    >
                      <option value="">Experience Level</option>
                      {props.experience.map((exp) => {
                        return (
                          <option key={exp.id} value={exp.id}>
                            {exp.title}
                          </option>
                        );
                      })}
                    </Input>

                    <Input
                      value={pay}
                      required
                      placeholder="Pay"
                      onChange={(event) => {
                        setPay(event.currentTarget.value);
                      }}
                    />
                    <Input
                      value={details}
                      required
                      placeholder="Details"
                      onChange={(event) => {
                        setDetails(event.currentTarget.value);
                      }}
                    />
                  </Form>
                </ModalBody>
                <ModalFooter>
                  <Button
                    color="primary"
                    onClick={() => {
                      clickHandler();
                      toggle();
                    }}
                  >
                    Post it
                  </Button>{' '}
                  <Button color="secondary" onClick={toggle}>
                    Cancel
                  </Button>
                </ModalFooter>
              </Modal>
              <div className="row">
                {props.allJobsByValidSessionUser.map(
                  (job: any, index: number) => {
                    return (
                      <div className="col-sm-5" key={index}>
                        <div className="card">
                          <h5 className="card-header">
                            {job.regionsTitle} {job.experienceTitle}
                          </h5>

                          <div className="card-body">
                            <h3 className="card-title"> {job.title}</h3>
                            <p className="card-text">{job.details}</p>
                            <a
                              href={`jobs/${job.id}`}
                              className="btn btn-primary"
                            >
                              See Job
                            </a>
                          </div>
                        </div>
                      </div>
                    );
                  },
                )}
              </div>{' '}
            </div>
          ) : (
            <div>
              <h2>All Jobs</h2>
              <h5>Filter :</h5>
              <div>
                {' '}
                <Input
                  type="select"
                  value={regionId}
                  onChange={(event) => {
                    setRegionId(event.currentTarget.value),
                      handleJobByRegionClick(event.currentTarget.value);
                  }}
                >
                  <option value="" disabled>
                    Select Region
                  </option>
                  {props.regions.map((region) => {
                    return (
                      <option key={region.id} value={region.title}>
                        {region.title}
                      </option>
                    );
                  })}
                </Input>
                <Input
                  type="select"
                  value={expId}
                  onChange={(event) => {
                    setExpId(event.currentTarget.value),
                      handleJobByExperienceClick(event.currentTarget.value);
                  }}
                >
                  <option value="" disabled>
                    Experience Level
                  </option>
                  {props.experience.map((exp) => {
                    return (
                      <option key={exp.id} value={exp.title}>
                        {exp.title}
                      </option>
                    );
                  })}
                </Input>
              </div>

              <div className="row">
                {allJobs.map((job: any, index: number) => {
                  return (
                    <div className="col-sm-5" key={index}>
                      <div className="card">
                        <h5 className="card-header">
                          {job.regionsTitle} {job.experienceTitle}
                        </h5>

                        <div className="card-body">
                          <h3 className="card-title"> {job.title}</h3>
                          <p className="card-text">{job.details}</p>
                          <a
                            href={`jobs/${job.id}`}
                            className="btn btn-primary"
                          >
                            See Job
                          </a>
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const response = await fetch(`http://localhost:3000/api/jobs`, {
    method: 'GET',
    headers: {
      cookie: context.req.headers.cookie || '',
    },
  });

  // Wait for the response of the fetch inside /jobs/index.ts and then transform it into json
  const json = await response.json();
  //console.log('API decoded JSON from response', json.allJobsByValidSessionUser);

  const regions = await getRegions();
  const experience = await getExperience();
  const regionFiltered = await getJobsByRegionTitle(regions[0].title);
  console.log(regionFiltered);
  console.log(regions[0].title);

  return {
    props: { ...json, regions, experience },
  };
}
